module Bridge.PubSub.Subscriber
  ( module Bridge.PubSub.Subscriber
  ) where
-- import Bridge.Prelude
-- import Bridge.PubSub.Prelude
-- import qualified Streamly
-- import VestPrelude
-- -- The bound streams close iff unsubscribe is called.
-- type family SubscriberBindings spec where
--   SubscriberBindings (Topic (f :: Format) (s :: Symbol) a) = ( Id "Subscriber"
--                                                              , Streamly.Serial a)
--   SubscriberBindings (a
--                       :<|> b) = (SubscriberBindings a
--                                  :<|> SubscriberBindings b)
-- class (PubSubTransport transport) =>
--       Subscriber spec transport
--   where
--   subscribe ::
--        Proxy (spec, transport) -> transport -> IO (SubscriberBindings spec)
-- instance (Subscriber a transport, Subscriber b transport) =>
--          Subscriber (a
--                      :<|> b) transport where
--   subscribe ::
--        Proxy ( a
--                :<|> b
--              , transport)
--     -> transport
--     -> IO (SubscriberBindings a
--            :<|> SubscriberBindings b)
--   subscribe _ transport = do
--     aStreams <- subscribe (Proxy :: Proxy (a, transport)) transport
--     bStreams <- subscribe (Proxy :: Proxy (b, transport)) transport
--     return $ aStreams :<|> bStreams
-- instance (KnownSymbol route, Read a, PubSubTransport transport) =>
--          Subscriber (Topic 'Haskell (route :: Symbol) a) transport where
--   subscribe ::
--        Proxy (Topic 'Haskell route a, transport)
--     -> transport
--     -> IO (Id "Subscriber", Streamly.Serial a)
--   subscribe _ = _subscribe readUnsafe (Id $ proxyText (Proxy :: Proxy route))
-- instance (KnownSymbol route, FromJSON a, PubSubTransport transport) =>
--          Subscriber (Topic 'JSON (route :: Symbol) a) transport where
--   subscribe ::
--        Proxy (Topic 'JSON route a, transport)
--     -> transport
--     -> IO (Id "Subscriber", Streamly.Serial a)
--   subscribe _ = _subscribe decodeUnsafe (Id $ proxyText (Proxy :: Proxy route))
